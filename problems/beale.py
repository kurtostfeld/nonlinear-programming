import torch


def beale_function(x: torch.Tensor) -> float:
    x1 = x[0].item()
    x2 = x[1].item()

    return (1.5 - x1 + x1 * x2)**2 + (2.25 - x1 + x1 * (x2**2))**2 + (2.625 - x1 + x1 * (x2**3))**2


def beale_gradient(x: torch.Tensor) -> torch.Tensor:
    x1 = x[0].item()
    x2 = x[1].item()

    g1 = 2 * x1 * x2**6 + 2 * x1 * x2**4 - 4 * x1 * x2**3 - 2 * x1 * x2**2 - 4 * x1 * x2 +\
        6 * x1 + 5.25 * x2**3 + 4.5 * x2**2 + 3 * x2 - 12.75
    g2 = x1 * (6 * x1 * x2**5 + 4 * x1 * x2**3 - 6 * x1 * x2**2 - 2 * x1 * x2 - 2 * x1 + 15.75 * x2**2 + 9*x2 + 3)

    # g1 = 2.25 * (4./3. * x2 - 4./3.) * (2./3. * x1 * x2 - 2./3. * x1 + 1) +\
    #     5.0625 * (0.888888888888889 * (x2**2) - 0.888888888888889) * (0.444444444444444 * x1 * (x2**2) - 0.444444444444444 * x1 + 1) + \
    #     6.890625 * (0.761904761904762 * (x2**3) - 0.761904761904762) * (0.380952380952381 * x1 * (x2**3) - 0.380952380952381 * x1 + 1)
    # g2 = 15.75 * x1 * (x2**2) * (0.3809523809 * x1 * (x2**3) - 0.38095238095238 * x1 + 1) +\
    #     9 * x1 * x2 * (0.44444444444 * x1 * (x2**2) - 0.44444444444 * x1 + 1) + \
    #     3 * x1 * (2./3. * x1 * x2 - 2./3 * x1 + 1)

    return torch.tensor([g1, g2], dtype=torch.double)


def beale_hessian(x: torch.Tensor) -> torch.Tensor:
    x1 = x[0].item()
    x2 = x[1].item()

    h11 = 2 * (x2 - 1)**2 + 2 * (x2**2 - 1)**2 + 2 * (x2**3 - 1)**2
    h12 = 12 * x1 * x2**5 + 8 * x1 * x2**3 - 12 * x1 * x2**2 - 4 * x1 * x2 - 4 * x1 +\
        15.75 * x2**2 + 9 * x2 + 3
    h21 = 12 * x1 * x2**5 + 8 * x1 * x2**3 - 12 * x1 * x2**2 - 4 * x1 * x2 - 4 * x1 +\
        15.75 * x2**2 + 9 * x2 + 3
    h22 = x1 * (30 * x1 * x2**4 + 12 * x1 * x2**2 - 12 * x1 * x2 - 2 * x1 + 31.5 * x2 + 9)

    return torch.tensor([[h11, h12], [h21, h22]], dtype=torch.double)
